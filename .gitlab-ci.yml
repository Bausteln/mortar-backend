stages:
  - test
  - build
  - package
  - trigger
  - deploy

variables:
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: "/certs"
  DOCKER_BUILDKIT: 1

# Test stage
lint:
  stage: test
  image: golang:1.25
  script:
    - go fmt ./...
    - go vet ./...
  only:
    - merge_requests
    - main
    - tags

unit-tests:
  stage: test
  image: golang:1.25
  script:
    - echo "Running unit tests for validation package..."
    - go test -v -race -coverprofile=validation-coverage.out ./internal/validation/...
    - go tool cover -func=validation-coverage.out
  coverage: '/total:\s+\(statements\)\s+(\d+\.\d+)%/'
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: validation-coverage.out
    paths:
      - validation-coverage.out
    expire_in: 30 days
  only:
    - merge_requests
    - main
    - tags

integration-tests:
  stage: test
  image: golang:1.25
  script:
    - echo "Running integration tests for handlers..."
    - go test -v -race -coverprofile=handlers-coverage.out ./internal/handlers/...
    - go tool cover -func=handlers-coverage.out
  coverage: '/total:\s+\(statements\)\s+(\d+\.\d+)%/'
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: handlers-coverage.out
    paths:
      - handlers-coverage.out
    expire_in: 30 days
  only:
    - merge_requests
    - main
    - tags

e2e-tests:
  stage: test
  image: golang:1.25
  script:
    - echo "Running end-to-end tests for server..."
    - go test -v -race -coverprofile=server-coverage.out ./internal/server/...
    - go tool cover -func=server-coverage.out
  coverage: '/total:\s+\(statements\)\s+(\d+\.\d+)%/'
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: server-coverage.out
    paths:
      - server-coverage.out
    expire_in: 30 days
  only:
    - merge_requests
    - main
    - tags

test-all:
  stage: test
  image: golang:1.25
  script:
    - echo "Running all tests with coverage..."
    - go test -v -race -coverprofile=coverage.out ./...
    - go tool cover -func=coverage.out
    - echo "Ensuring minimum coverage threshold..."
    - |
      COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print $3}' | sed 's/%//')
      echo "Total coverage: $COVERAGE%"
      if (( $(echo "$COVERAGE < 40.0" | bc -l) )); then
        echo "Coverage is below 40% threshold"
        exit 1
      fi
  coverage: '/total:\s+\(statements\)\s+(\d+\.\d+)%/'
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.out
    paths:
      - coverage.out
    expire_in: 30 days
  only:
    - merge_requests
    - main
    - tags

# Build Docker image
build:
  stage: build
  image:
    name: moby/buildkit:rootless
    entrypoint: [""]
  variables:
    BUILDKITD_FLAGS: --oci-worker-no-process-sandbox
  before_script:
    - mkdir -p ~/.docker
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > ~/.docker/config.json
  script:
    - |
      buildctl-daemonless.sh build \
        --frontend dockerfile.v0 \
        --local context=. \
        --local dockerfile=. \
        --output type=image,name=$CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA,push=true \
        --output type=image,name=$CI_REGISTRY_IMAGE:$CI_COMMIT_TAG,push=true \
        --output type=image,name=$CI_REGISTRY_IMAGE:latest,push=true
  only:
    - tags

# Package and publish Helm chart
package-helm:
  stage: package
  image: alpine/helm:latest
  script:
    - helm package helm/mortar
    - |
      VERSION=${CI_COMMIT_TAG#v}
      curl --request POST \
        --user gitlab-ci-token:$CI_JOB_TOKEN \
        --form "chart=@mortar-${VERSION}.tgz" \
        "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/helm/api/stable/charts"
  only:
    - tags

# Trigger portal build with version tag
trigger-portal:
  stage: trigger
  trigger:
    project: foss/reverse-proxy/mortar-portal
    branch: main
    strategy: depend
  variables:
    VERSION_TAG: $CI_COMMIT_TAG
  only:
    - tags

# Trigger crossplane build with version tag
trigger-crossplane:
  stage: trigger
  trigger:
    project: foss/reverse-proxy/proxy-rules
    branch: main
    strategy: depend
  variables:
    VERSION_TAG: $CI_COMMIT_TAG
  only:
    - tags
